#version 330 core

layout(location = 0) out vec4 color;

in vec2 v_position;
in vec4 v_color;
in vec2 v_uv;
in vec2 v_size;
in float v_radius;

uniform sampler2D u_texture;

const float corner_smooth_factor = 0.55;

float sqaure(float value)
{
    return value * value;
}

float distance_sqaured(vec2 first, vec2 second)
{
    vec2 vector = second - first;
    return dot(vector, vector);
}

float calculate_rounded_corners()
{
    if (v_radius <= 0.0)
    {
        return 1.0;
    }
    
    vec2 position = (abs(v_uv - 0.5) + 0.5) * v_size;
    vec2 arc_cpt_vec = max(position - v_size + v_radius, 0.0);
    
    return length(arc_cpt_vec) > v_radius ? 0.0 : 1.0;
//    vec2 _min = vec2(v_radius, v_radius);
//    vec2 _max = vec2(v_size.x - v_radius, v_size.y - v_radius);
//
//    vec2 corner = clamp(pixel, _min, _max);
//    float lower = sqaure(v_radius - corner_smooth_factor);
//    float upper = sqaure(v_radius + corner_smooth_factor);
//
//    return smoothstep(upper, lower, distance_sqaured(pixel, corner));
}

void main()
{
    color = texture(u_texture, v_uv) * v_color;
    color.a *= calculate_rounded_corners();
    
}
